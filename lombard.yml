x-logging: &logging
  logging:
    driver: json-file
    options:
      max-size: 100m
      max-file: "3"
      tag: '{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}'

services:
  ledgerd:
    build:
      context: ./cosmovisor
      dockerfile: Dockerfile.binary
      args:
        - DAEMON_VERSION=${LEDGERD_VERSION}
        - USER=ledger
        - DOWNLOAD_BASE_URL=${DOWNLOAD_BASE_URL:-}
    image: ledgerd:local
    pull_policy: never
    user: ledger
    restart: unless-stopped
    stop_grace_period: 5m
    environment:
      - DAEMON_VERSION=${LEDGERD_VERSION}
      - EXTRA_FLAGS=${EXTRA_FLAGS:-}
      - NETWORK=${NETWORK}
      - MONIKER=${MONIKER}
      - DOWNLOAD_BASE_URL=${DOWNLOAD_BASE_URL:-}
      - PERSISTENT_PEERS=${PEERS:-}
      - CL_GRPC_PORT=${CL_GRPC_PORT:-9090}
      - CL_P2P_PORT=${CL_P2P_PORT:-26656}
      - CL_RPC_PORT=${CL_RPC_PORT:-26657}
      - REST_API_PORT=${REST_API_PORT:-1317}
      - RPC_PORT=${RPC_PORT:-8545}
      - WS_PORT=${WS_PORT:-8546}
      - SNAPSHOT=${SNAPSHOT}
      - STATE_SYNC_URL=${STATE_SYNC_URL}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - DAEMON_HOME=/cosmos
      - DAEMON_NAME=ledgerd
      - DAEMON_ALLOW_DOWNLOAD_BINARIES=false
      - DAEMON_RESTART_AFTER_UPGRADE=true
      - DAEMON_DATA_BACKUP_DIR=/cosmos
      - CLIENT_DAEMON_NAME=ledgerd
      - CLIENT_SKIP_UPGRADE=false
      - CLIENT_START_PROCESS=false
      - UNSAFE_SKIP_BACKUP=true
    ports:
      - ${CL_P2P_PORT:-26656}:${CL_P2P_PORT:-26656}/tcp
      - ${CL_RPC_PORT:-26657}:${CL_RPC_PORT:-26657}/tcp
      - ${CL_SIGNER_PORT:-26659}:${CL_SIGNER_PORT:-26659}/tcp
    <<: *logging
    volumes:
      - consensus-data:/cosmos
    entrypoint:
      - docker-entrypoint.sh
      - cosmovisor
      - run
      - start
      - --home
      - /cosmos
      - --log_format
      - json
      - --minimum-gas-prices
      - ${MIN_GAS_PRICE}
    labels:
        - traefik.enable=true
        - traefik.http.routers.${RPC_HOST}.service=${RPC_HOST}
        - traefik.http.routers.${RPC_HOST}.entrypoints=websecure
        - traefik.http.routers.${RPC_HOST}.rule=Host(`${RPC_HOST}.${DOMAIN}`)
        - traefik.http.routers.${RPC_HOST}.tls.certresolver=letsencrypt
        - traefik.http.routers.${RPC_HOST}lb.service=${RPC_HOST}
        - traefik.http.routers.${RPC_HOST}lb.entrypoints=websecure
        - traefik.http.routers.${RPC_HOST}lb.rule=Host(`${RPC_LB}.${DOMAIN}`)
        - traefik.http.routers.${RPC_HOST}lb.tls.certresolver=letsencrypt
        - traefik.http.services.${RPC_HOST}.loadbalancer.server.port=${RPC_PORT}
        - traefik.http.routers.${WS_HOST:-lombardws}.service=${WS_HOST:-lombardws}
        - traefik.http.routers.${WS_HOST:-lombardws}.entrypoints=websecure
        - traefik.http.routers.${WS_HOST:-lombardws}.rule=Host(`${WS_HOST:-lombardws}.${DOMAIN}`)
        - traefik.http.routers.${WS_HOST:-lombardws}.tls.certresolver=letsencrypt
        - traefik.http.routers.${WS_HOST:-lombardws}lb.service=${WS_HOST:-lombardws}
        - traefik.http.routers.${WS_HOST:-lombardws}lb.entrypoints=websecure
        - traefik.http.routers.${WS_HOST:-lombardws}lb.rule=Host(`${WS_LB:-lombardws-lb}.${DOMAIN}`)
        - traefik.http.routers.${WS_HOST:-lombardws}lb.tls.certresolver=letsencrypt
        - traefik.http.services.${WS_HOST:-lombardws}.loadbalancer.server.port=${WS_PORT:-8546}
        - metrics.scrape=true
        - metrics.path=/metrics
        - metrics.port=26660
        - metrics.instance=lombard
        - metrics.network=${NETWORK}

  cosmovisor:
    profiles: ["tools"]
    build:
      context: ./cosmovisor
      dockerfile: Dockerfile.binary
      args:
        - DAEMON_VERSION=${LEDGERD_VERSION}
        - USER=ledger
        - DOWNLOAD_BASE_URL=${DOWNLOAD_BASE_URL:-}
    image: ledgerd:local
    pull_policy: never
    user: ledger
    environment:
      - DAEMON_VERSION=${LEDGERD_VERSION}
      - EXTRA_FLAGS=${EXTRA_FLAGS:-}
      - NETWORK=${NETWORK}
      - MONIKER=${MONIKER}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - DAEMON_HOME=/cosmos
      - DAEMON_NAME=ledgerd
      - DAEMON_ALLOW_DOWNLOAD_BINARIES=false
      - DAEMON_RESTART_AFTER_UPGRADE=true
      - DAEMON_DATA_BACKUP_DIR=/cosmos
      - CLIENT_DAEMON_NAME=ledgerd
      - CLIENT_SKIP_UPGRADE=false
      - CLIENT_START_PROCESS=false
      - UNSAFE_SKIP_BACKUP=true
    volumes:
      - consensus-data:/cosmos
      - ./upgrades:/upgrades:rw
    entrypoint:
      - cosmovisor

  cli:
    profiles: ["tools"]
    build:
      context: ./cosmovisor
      dockerfile: Dockerfile.binary
      args:
        - DAEMON_VERSION=${LEDGERD_VERSION}
        - USER=ledger
        - DOWNLOAD_BASE_URL=${DOWNLOAD_BASE_URL:-}
    image: ledgerd:local
    pull_policy: never
    user: ledger
    environment:
      - DAEMON_VERSION=${LEDGERD_VERSION}
      - EXTRA_FLAGS=${EXTRA_FLAGS:-}
      - NETWORK=${NETWORK}
      - MONIKER=${MONIKER}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - DAEMON_HOME=/cosmos
      - DAEMON_NAME=ledgerd
      - DAEMON_ALLOW_DOWNLOAD_BINARIES=false
      - DAEMON_RESTART_AFTER_UPGRADE=true
      - DAEMON_DATA_BACKUP_DIR=/cosmos
      - CLIENT_DAEMON_NAME=ledgerd
      - CLIENT_SKIP_UPGRADE=false
      - CLIENT_START_PROCESS=false
      - UNSAFE_SKIP_BACKUP=true
    volumes:
      - consensus-data:/cosmos
      - ./keys/operator:/cosmos/keyring-test:rw
      - ./keys/consensus/priv_validator_key.json:/cosmos/config/priv_validator_key.json:rw
      - ./keys/consensus/priv_validator_state.json:/cosmos/data/priv_validator_state.json:rw
    entrypoint:
      - ledgerd
  
  create-validator-keys:
    profiles: ["tools"]
    build:
      context: ./cosmovisor
      dockerfile: Dockerfile.binary
      args:
        - DAEMON_VERSION=${LEDGERD_VERSION}
        - USER=ledger
        - DOWNLOAD_BASE_URL=${DOWNLOAD_BASE_URL:-}
    image: ledgerd:local
    pull_policy: never
    user: root
    volumes:
      - ./keys/consensus:/data/config:rw
    entrypoint: ["/bin/bash","-c"]
    command:
      - |
        ledgerd init $MONIKER --chain-id $NETWORK --home /cosmos > /dev/null 2>&1
        cp /cosmos/config/priv_validator_key.json /data/config/
        cp /cosmos/data/priv_validator_state.json /data/config/
        chown -R ledger:ledger /data/config/*
        echo "Validator keys created!"

  import-validator-keys:
    profiles: ["tools"]
    build:
      context: ./cosmovisor
      dockerfile: Dockerfile.binary
      args:
        - DAEMON_VERSION=${LEDGERD_VERSION}
        - USER=ledger
        - DOWNLOAD_BASE_URL=${DOWNLOAD_BASE_URL:-}
    image: ledgerd:local
    pull_policy: never
    user: root
    volumes:
      - consensus-data:/cosmos
      - ./keys/consensus:/data/config:rw
    entrypoint: ["/bin/bash","-c"]
    command:
      - |
        echo "Importing validator key and state file from ./keys/consensus into container"
        cp /data/config/priv_validator_key.json /cosmos/config/
        cp /data/config/priv_validator_state.json /cosmos/data/
        chown -R ledger:ledger /cosmos/config/priv_validator_key.json
        chown -R ledger:ledger /cosmos/data/priv_validator_state.json
        echo "Validator keys imported!"

  export-validator-keys:
    profiles: ["tools"]
    build:
      context: ./cosmovisor
      dockerfile: Dockerfile.binary
      args:
        - DAEMON_VERSION=${LEDGERD_VERSION}
        - USER=ledger
        - DOWNLOAD_BASE_URL=${DOWNLOAD_BASE_URL:-}
    image: ledgerd:local
    pull_policy: never
    user: root
    volumes:
      - consensus-data:/cosmos
      - ./keys/consensus:/data/config:rw
    entrypoint: ["/bin/bash","-c"]
    command:
      - |
        echo "Exporting validator key and state file from container to ./keys/consensus"
        cp /cosmos/config/priv_validator_key.json /data/config/
        cp /cosmos/data/priv_validator_state.json /data/config/
        echo "Validator keys exported!"

  create-operator-wallet:
    profiles: ["tools"]
    build:
      context: ./cosmovisor
      dockerfile: Dockerfile.binary
      args:
        - DAEMON_VERSION=${LEDGERD_VERSION}
        - USER=ledger
        - DOWNLOAD_BASE_URL=${DOWNLOAD_BASE_URL:-}
    image: ledgerd:local
    pull_policy: never
    user: root
    volumes:
      - ./keys/operator:/cosmos/keyring-test:rw
    entrypoint: ["/bin/bash","-c"]
    command:
      - |
        ledgerd init $MONIKER --chain-id $NETWORK --home /cosmos > /dev/null 2>&1
        ledgerd keys add $MONIKER --keyring-backend test --home /cosmos 2>&1 | tee /tmp/temp_backup
        [ $${PIPESTATUS[0]} -eq 0 ] && sed -n '/- address/,$$p' /tmp/temp_backup > "/cosmos/keyring-test/${MONIKER}.backup" || rm /tmp/temp_backup
        ledgerd --home /cosmos --keyring-backend test keys show ${MONIKER} --bech val -a
        chown -R ledger:ledger /cosmos/keyring-test/*
  
  register-validator:
    profiles: ["tools"]
    build:
      context: ./cosmovisor
      dockerfile: Dockerfile.binary
      args:
        - DAEMON_VERSION=${LEDGERD_VERSION}
        - USER=ledger
        - DOWNLOAD_BASE_URL=${DOWNLOAD_BASE_URL:-}
    image: ledgerd:local
    pull_policy: never
    user: ledger
    environment:
      - MIN_GAS_PRICE=${MIN_GAS_PRICE}
    volumes:
      - ./keys/consensus/priv_validator_key.json:/cosmos/config/priv_validator_key.json:ro
      - ./keys/consensus/priv_validator_state.json:/cosmos/data/priv_validator_state.json:rw
      - ./keys/operator:/cosmos/keyring-test:ro
    entrypoint: ["/bin/bash","-c"]
    command:
      - |
        echo "Validator pubkey:"
        ledgerd --home /cosmos comet show-validator
        cat > /cosmos/stake-validator.json << EOF
        {
            "pubkey": $(ledgerd --home /cosmos comet show-validator),
            "amount": "1ustake",
            "moniker": "$(echo $MONIKER)",
            "commission-rate": "0.1",
            "commission-max-rate": "0.2",
            "commission-max-change-rate": "0.01",
            "min-self-delegation": "1"
        }
        EOF
        cat /cosmos/stake-validator.json
        ledgerd --home /cosmos tx staking create-validator /cosmos/stake-validator.json \
        --gas "auto" \
        --gas-adjustment 1.5 \
        --gas-prices "${MIN_GAS_PRICE}" \
        --from=$MONIKER \
        --keyring-backend=test \
        --node http://ledger:$CL_RPC_PORT/

volumes:
  consensus-data:
